= Ouroboros-Network Repository Hackage Documentation

[skip to module list](#module-list)

This site contains Haskell documentation of

* __Ouroboros-Network__  - networking component of the Haskell implementation of Ouroboros protocols
* __Ouroboros-Consensus__ - Ouroboros Consensus family of protocols which integrate with `Ouroboros-Network`

== Network

* __ouroboros-network-framework__ - our instantiations and implementation
  of servers, clients, abstractions for working with named pipes and unix
  sockets.  These are higher level components, which don't dependent on
  ouroboros protocols, but build a solid foundation for the networking
  library

* __ouroboros-network__ - networking library which supports /Ouroboros family
    of protocols/. It includes:

      * /Implementations, type level specifications, and APIs of all the protocols:/

          * __[ChainSync](ouroboros-network-protocols/Ouroboros-Network-Protocol-ChainSync-Type.html)__
          * __[BlockFetch](ouroboros-network-protocols/Ouroboros-Network-Protocol-BlockFetch-Type.html)__
          * __[TxSubmission](ouroboros-network-protocols/Ouroboros-Network-Protocol-TxSubmission-Type.html)__
          * __[TxSubmission2](ouroboros-network-protocols/Ouroboros-Network-Protocol-TxSubmission2-Type.html)__
          * __[LocalTxSubmission](ouroboros-network-protocols/Ouroboros-Network-Protocol-LocalTxSubmission-Type.html)__
          * __[LocalStateQuery](ouroboros-network-protocols/Ouroboros-Network-Protocol-LocalStateQuery-Type.html)__
          * __[LocalTxMonitor](ouroboros-network-potocols/Ouroboros-Network-Protocol-LocalTxMonitor-Type.html)__
          * __[Handshake](ouroboros-network-framework/Ouroboros-Network-Protocol-Handshake-Type.html)__

     * /Block chain related data structures that the networking code needs
       to be aware of:/

          * __[Block](ouroboros-network-api/Ouroboros-Network-Block.html)__
          * __[AnchoredFragment](ouroboros-network-api/Ouroboros-Network-AnchoredFragment.html)__

     * /Network applications:/

          * __[Block Fetch Application](ouroboros-network/Ouroboros-Network-BlockFetch.html)__
          * __Tx Submission Applications__:

              * __[inbound](ouroboros-network/Ouroboros-Network-TxSubmission-Inbound.html)__
              * __[outbound](ouroboros-network/Ouroboros-Network-TxSubmission-Outbound.html)__

          * __[Peer Selection](ouroboros-network/Ouroboros-Network-PeerSelection-Governor.html)__
          * __[Data Diffusion](ouroboros-network/Ouroboros-Network-Diffusion.html)__ which combines all the pieces for supporting
            a [node](https://github.com://input-output-hk/cardano-node)
          * __[NodeToNode API](ouroboros-network/Ouroboros-Network-NodeToNode.html)__
          * __[NodeToClient API](ouroboros-network/Ouroboros-Network-NodeToClient.html)__

== Ouroboros Consensus

This graph depicts the relationship between the various `xxx-consensus-yyy` packages:

![Consensus packages dependencies](packages-consensus.svg)

* __ouroboros-consensus__ : Main package for Cardano consensus implementation, aka. Ouroboros.

    * The [Ouroboros Consensus Modules Map](./modules-consensus.svg) represents the dependencies between various /Consensus/ modules and is a map to navigate the (large) codebase. Clicking on a module should bring you to the corresponding haddock page from which you can later navigate to the source code. __Note__: The image needs to be enlarged to be useful hence why it's an external link.

* __ouroboros-consensus-test__ : Property and model-based tests for consensus, using [io-sim](https://github.com/input-output-hk/io-sim)

    * __[ThreadNet Simulator](ouroboros-consensus-test/Test-ThreadNet-Network.html)__: Simulates a network of nodes

* __ouroboros-consensus-byron__ : Byron-era consensus logic
* __ouroboros-consensus-byron-test__ : Byron specific tests

    * __[Examples](ouroboros-consensus-byron-test/Test-Consensus-Byron-Examples.html)__

* __ouroboros-consensus-shelley-test__ : Shelley specific tests

    * __[Examples](ouroboros-consensus-shelley-test/Test-Consensus-Shelley-Examples.html)__

* __ouroboros-consensus-mock__ : Integration of consensus with a mock ledger, for testing and experimentation purpose

    * __[Mock Ledger](ouroboros-consensus-mock/Ouroboros-Consensus-Mock-Ledger.html)__

* __ouroboros-consensus-mock-test__ : Tests for consensus with mock ledger

    * __[Generators](ouroboros-consensus-mock-test/Test-Consensus-Ledger-Mock-Generators.html)__ provides various orphan `Arbitrary` instances

* __db-analyser__: A command-line tool for offline analysis of the consensus database

=== Testing in the consensus layer

The vast majority of the tests in the consensus layer are QuickCheck property
tests, and many of these are model based. There are only a handful of unit
tests. The consensus layer is an intricate piece of software with lots of
components, which we set at virtually every level of granularity. Below we give
an overview of the tests that we do per component. For the detailed listing,
please refer to the various test suites within the [repository](https://github.com/input-output-hk/ouroboros-network/).

* __[test-infra\/Main.hs](https://github.com/input-output-hk/ouroboros-network/blob/master/ouroboros-consensus-test/test-infra/Main.hs)__
  provides tests for the infrastructure used for running consensus-related tests.

* __[test-storage\/Main.hs](https://github.com/input-output-hk/ouroboros-network/blob/master/ouroboros-consensus-test/test-storage/Main.hs)__
  provides tests for the storage layer used by Consensus.

    * The file system abstraction tests can be found in
      __[Test.Ouroboros.Storage.FS.StateMachine](https://github.com/input-output-hk/ouroboros-network/blob/master/ouroboros-consensus-test/test-storage/Test/Ouroboros/Storage/FS/StateMachine.hs)__.

    * The immutable DB tests can be found in
      __[Test.Ouroboros.Storage.ImmutableDB](https://github.com/input-output-hk/ouroboros-network/blob/master/ouroboros-consensus-test/test-storage/Test/Ouroboros/Storage/ImmutableDB.hs)__.

        * The primary index test can be found in
          __[Test.Ouroboros.Storage.ImmutableDB.Primary](https://github.com/input-output-hk/ouroboros-network/blob/master/ouroboros-consensus-test/test-storage/Test/Ouroboros/Storage/ImmutableDB/Primary.hs)__.

        * The model-based tests for the immutable DB can be found in
          __[Test.Ouroboros.Storage.ImmutableDB.StateMachine](https://github.com/input-output-hk/ouroboros-network/blob/master/ouroboros-consensus-test/test-storage/Test/Ouroboros/Storage/ImmutableDB/StateMachine.hs)__.

    * The tests for the volatile DB can be found in
      __[Test.Ouroboros.Storage.VolatileDB.StateMachine](https://github.com/input-output-hk/ouroboros-network/blob/master/ouroboros-consensus-test/test-storage/Test/Ouroboros/Storage/VolatileDB/StateMachine.hs)__.

    * The ledger DB tests can be found in
      __[Test.Ouroboros.Storage.LedgerDB](https://github.com/input-output-hk/ouroboros-network/blob/master/ouroboros-consensus-test/test-storage/Test/Ouroboros/Storage/LedgerDB.hs)__:

        * The in-memory ledger DB tests can be found in
          __[Test.Ouroboros.Storage.LedgerDB.InMemory](https://github.com/input-output-hk/ouroboros-network/blob/master/ouroboros-consensus-test/test-storage/Test/Ouroboros/Storage/LedgerDB/InMemory.hs)__.

        * The on-disk ledger DB tests can be found in
          __[Test.Ouroboros.Storage.LedgerDB.OnDisk](https://github.com/input-output-hk/ouroboros-network/blob/master/ouroboros-consensus-test/test-storage/Test/Ouroboros/Storage/LedgerDB/OnDisk.hs)__.

    * The tests for the chain DB can be found in
      __[Test.Ouroboros.Storage.ChainDB](https://github.com/input-output-hk/ouroboros-network/blob/master/ouroboros-consensus-test/test-storage/Test/Ouroboros/Storage/ChainDB.hs)__. The tests include:

        * The tests for the garbage collection schedule can be found in
          __[Test.Ouroboros.Storage.ChainDB.GcSchedule](https://github.com/input-output-hk/ouroboros-network/blob/master/ouroboros-consensus-test/test-storage/Test/Ouroboros/Storage/ChainDB/GcSchedule.hs)__.


        * The tests for the chain DB iterator can be found in
          __[Test.Ouroboros.Storage.ChainDB.Iterator](https://github.com/input-output-hk/ouroboros-network/blob/master/ouroboros-consensus-test/test-storage/Test/Ouroboros/Storage/ChainDB/Iterator.hs)__.

        * The tests of properties of the chain DB model can be found in
          __[Test.Ouroboros.Storage.ChainDB.Model.Test](https://github.com/input-output-hk/ouroboros-network/blob/master/ouroboros-consensus-test/test-storage/Test/Ouroboros/Storage/ChainDB/Model/Test.hs)__.

        * The main tests for the chain DB can be found in
          __[Test.Ouroboros.Storage.ChainDB.StateMachine](https://github.com/input-output-hk/ouroboros-network/blob/master/ouroboros-consensus-test/test-storage/Test/Ouroboros/Storage/ChainDB/StateMachine.hs)__.

* Golden tests: our golden tests infrastructure lives in
  __[Test.Util.Serialisation.Golden](https://github.com/input-output-hk/ouroboros-network/blob/master/ouroboros-consensus-test/src/Test/Util/Serialisation/Golden.hs)__.
  Golden tests are specific to each era:

    * [Test.Consensus.Byron.Golden](https://github.com/input-output-hk/ouroboros-network/blob/master/ouroboros-consensus-byron-test/test/Test/Consensus/Byron/Golden.hs)

    * [Test.Consensus.Cardano.Golden](https://github.com/input-output-hk/ouroboros-network/blob/master/ouroboros-consensus-cardano-test/test/Test/Consensus/Cardano/Golden.hs)

    * [Test.Consensus.Shelley.Golden](https://github.com/input-output-hk/ouroboros-network/blob/master/ouroboros-consensus-shelley-test/test/Test/Consensus/Shelley/Golden.hs)

* Miscellanous tests (@test-consensus@ test suite)

    * The tests for the resource registry can be found in
      __[Test.Consensus.ResourceRegistry](https://github.com/input-output-hk/ouroboros-network/blob/master/ouroboros-consensus-test/test-consensus/Test/Consensus/ResourceRegistry.hs)__.

    * The tests for the RAW lock mechanism we use can be found in
      __[Test.Consensus.Util.MonadSTM.RAWLock](https://github.com/input-output-hk/ouroboros-network/blob/master/ouroboros-consensus-test/test-consensus/Test/Consensus/Util/MonadSTM/RAWLock.hs)__.

    * The tests for the computation of blockchain time can be found in
      __[Test.Consensus.BlockchainTime.Simple](https://github.com/input-output-hk/ouroboros-network/blob/master/ouroboros-consensus-test/test-consensus/Test/Consensus/BlockchainTime/Simple.hs)__.

    * The tests for the mempool can be found in
      __[Test.Consensus.Mempool](https://github.com/input-output-hk/ouroboros-network/blob/master/ouroboros-consensus-test/test-consensus/Test/Consensus/Mempool.hs)__.

    * The tests for the chain sync client can be found in
      __[Test.Consensus.MiniProtocol.ChainSync.Client](https://github.com/input-output-hk/ouroboros-network/blob/master/ouroboros-consensus-test/test-consensus/Test/Consensus/MiniProtocol/ChainSync/Client.hs)__.

    * The tests for the local state query server can be found in
      __[Test.Consensus.MiniProtocol.LocalStateQuery.Server](https://github.com/input-output-hk/ouroboros-network/blob/master/ouroboros-consensus-test/test-consensus/Test/Consensus/MiniProtocol/LocalStateQuery/Server.hs)__.

    * The tests for versioned serialisation can be found in
      __[Test.Consensus.Util.Versioned](https://github.com/input-output-hk/ouroboros-network/blob/master/ouroboros-consensus-test/test-consensus/Test/Consensus/Util/Versioned.hs)__.

    * The tests for the DB marker and DB lock can be found in
      __[Test.Consensus.Node](https://github.com/input-output-hk/ouroboros-network/blob/master/ouroboros-consensus-test/test-consensus/Test/Consensus/Node.hs)__.

* The hard fork combinator, time infrastructure: One of the responsibilities of
  the HFC is to offer time conversions (slot to epoch, wall clock to slot, etc.)
  across era transitions (which might change parameters such as the slot length
  and the epoch size). It does this by constructing a "summary" of the current
  state of the chain, basically recording what the various slot lengths and
  epoch sizes have been so far, and how far ahead we can look (the so-called
  "safe zone": if the transition to the next era is not yet known, there must
  exist a limited period after the ledger tip in which we can still time
  conversions).

    * The tests for the hard fork summary can be found in
      __[Test.Consensus.HardFork.Summary](https://github.com/input-output-hk/ouroboros-network/blob/master/ouroboros-consensus-test/test-consensus/Test/Consensus/HardFork/Summary.hs)__.

    * The tests for the hard fork history can be found in
      __[Test.Consensus.HardFork.History](https://github.com/input-output-hk/ouroboros-network/blob/master/ouroboros-consensus-test/test-consensus/Test/Consensus/HardFork/History.hs)__.

==== Consensus tests

The main consensus tests are the consensus layer's sophisticated tests. They are
"system level" tests, in which we set up a mock network of nodes, where we can
simulate things like nodes joining late, network message delay, etc. We then
have these nodes run the full protocol, exchanging blocks, doing chain
selection, etc. Finally we verify that the nodes can reach consensus. We have
some generic infrastructure for doing all of this, and then have specific tests
for each of the protocols/ledgers we support.

In a way, these are the most important tests we have, as they are testing
properties of the system as a whole. Of course, that also means that if
something goes wrong, debugging these tests can be difficult, and it would be
better to have such problems caught by the other, more fine-grained, tests.

We run these tests for

* A mock ledger (containing bare bones UTxO style transactions) using a variety
  of consensus protocols: BFT, PBFT, Praos, and a version of Praos where we
  override the leader schedule. See [this directory](https://github.com/input-output-hk/ouroboros-network/tree/master/ouroboros-consensus-mock-test/test/Test/ThreadNet).
* Byron/PBFT. See
  __[Test.ThreadNet.Byron](https://github.com/input-output-hk/ouroboros-network/blob/master/ouroboros-consensus-byron-test/test/Test/ThreadNet/Byron.hs)__.
* DualByron. See
  __[Test.ThreadNet.DualByron](https://github.com/input-output-hk/ouroboros-network/blob/master/ouroboros-consensus-byron-test/test/Test/ThreadNet/DualByron.hs)__.
* Shelley/TPraos. See
  __[Test.ThreadNet.Shelley](https://github.com/input-output-hk/ouroboros-network/blob/master/ouroboros-consensus-shelley-test/test/Test/ThreadNet/Shelley.hs)__.
* The hard fork combinator transitioning from a mock ledger @A@ to a mock ledger @B@;
  these mock ledgers are absolutely minimal ledgers: the only transaction supported
  on the @A@ ledger is "initiate transition to @B@", and the @B@ ledger can only contain
  blocks with a header only, no body at all. TODO: where are these?
* @HardForkBlock '[Byron, Shelley]@: the hard fork combinator instantiated with
  the Byron and Shelley ledgers, running @PBFT@ before the transition and
  @TPraos@ after. TODO: where are these?
