= Ouroboros-Network Repository Hackage Documentation

[skip to module list](#module-list)

This site contains Haskell documentation of

* __Ouroboros-Network__  - networking component of the Haskell implementation of Ouroboros protocols
* __Ouroboros-Consensus__ - Ouroboros Consensus family of protocols which integrate with `Ouroboros-Network`

== Network

* __ouroboros-network-framework__ - our instantiations and implementation
  of servers, clients, abstractions for working with named pipes and unix
  sockets.  These are higher level components, which don't dependent on
  ouroboros protocols, but build a solid foundation for the networking
  library

* __ouroboros-network__ - networking library which supports /Ouroboros family
    of protocols/. It includes:

      * /Implementations, type level specifications, and APIs of all the protocols:/

          * __[ChainSync](ouroboros-network-protocols/Ouroboros-Network-Protocol-ChainSync-Type.html)__
          * __[BlockFetch](ouroboros-network-protocols/Ouroboros-Network-Protocol-BlockFetch-Type.html)__
          * __[TxSubmission](ouroboros-network-protocols/Ouroboros-Network-Protocol-TxSubmission-Type.html)__
          * __[TxSubmission2](ouroboros-network-protocols/Ouroboros-Network-Protocol-TxSubmission2-Type.html)__
          * __[LocalTxSubmission](ouroboros-network-protocols/Ouroboros-Network-Protocol-LocalTxSubmission-Type.html)__
          * __[LocalStateQuery](ouroboros-network-protocols/Ouroboros-Network-Protocol-LocalStateQuery-Type.html)__
          * __[LocalTxMonitor](ouroboros-network-potocols/Ouroboros-Network-Protocol-LocalTxMonitor-Type.html)__
          * __[Handshake](ouroboros-network-framework/Ouroboros-Network-Protocol-Handshake-Type.html)__

     * /Block chain related data structures that the networking code needs
       to be aware of:/

          * __[Block](ouroboros-network-api/Ouroboros-Network-Block.html)__
          * __[AnchoredFragment](ouroboros-network-api/Ouroboros-Network-AnchoredFragment.html)__

     * /Network applications:/

          * __[Block Fetch Application](ouroboros-network/Ouroboros-Network-BlockFetch.html)__
          * __Tx Submission Applications__:

              * __[inbound](ouroboros-network/Ouroboros-Network-TxSubmission-Inbound.html)__
              * __[outbound](ouroboros-network/Ouroboros-Network-TxSubmission-Outbound.html)__

          * __[Peer Selection](ouroboros-network/Ouroboros-Network-PeerSelection-Governor.html)__
          * __[Data Diffusion](ouroboros-network/Ouroboros-Network-Diffusion.html)__ which combines all the pieces for supporting
            a [node](https://github.com://input-output-hk/cardano-node)
          * __[NodeToNode API](ouroboros-network/Ouroboros-Network-NodeToNode.html)__
          * __[NodeToClient API](ouroboros-network/Ouroboros-Network-NodeToClient.html)__

== Ouroboros Consensus

This graph depicts the relationship between the various `xxx-consensus-yyy` packages:

![Consensus packages dependencies](packages-consensus.svg)

* __ouroboros-consensus__ : Main package for Cardano consensus implementation, aka. Ouroboros.

    * The [Ouroboros Consensus Modules Map](./modules-consensus.svg) represents the dependencies between various /Consensus/ modules and is a map to navigate the (large) codebase. Clicking on a module should bring you to the corresponding haddock page from which you can later navigate to the source code. __Note__: The image needs to be enlarged to be useful hence why it's an external link.

* __ouroboros-consensus-test__ : Property and model-based tests for consensus, using [io-sim](https://github.com/input-output-hk/io-sim)

    * __[ThreadNet Simulator](ouroboros-consensus-test/Test-ThreadNet-Network.html)__: Simulates a network of nodes

* __ouroboros-consensus-byron__ : Byron-era consensus logic
* __ouroboros-consensus-byron-test__ : Byron specific tests

    * __[Examples](ouroboros-consensus-byron-test/Test-Consensus-Byron-Examples.html)__

* __ouroboros-consensus-shelley-test__ : Shelley specific tests

    * __[Examples](ouroboros-consensus-shelley-test/Test-Consensus-Shelley-Examples.html)__

* __ouroboros-consensus-mock__ : Integration of consensus with a mock ledger, for testing and experimentation purpose

    * __[Mock Ledger](ouroboros-consensus-mock/Ouroboros-Consensus-Mock-Ledger.html)__

* __ouroboros-consensus-mock-test__ : Tests for consensus with mock ledger

    * __[Generators](ouroboros-consensus-mock-test/Test-Consensus-Ledger-Mock-Generators.html)__ provides various orphan `Arbitrary` instances

* __db-analyser__: A command-line tool for offline analysis of the consensus database

==== Consensus tests

The main consensus tests are the consensus layer's sophisticated tests. They are
"system level" tests, in which we set up a mock network of nodes, where we can
simulate things like nodes joining late, network message delay, etc. We then
have these nodes run the full protocol, exchanging blocks, doing chain
selection, etc. Finally we verify that the nodes can reach consensus. We have
some generic infrastructure for doing all of this, and then have specific tests
for each of the protocols/ledgers we support.

In a way, these are the most important tests we have, as they are testing
properties of the system as a whole. Of course, that also means that if
something goes wrong, debugging these tests can be difficult, and it would be
better to have such problems caught by the other, more fine-grained, tests.

We run these tests for

* A mock ledger (containing bare bones UTxO style transactions) using a variety
  of consensus protocols: BFT, PBFT, Praos, and a version of Praos where we
  override the leader schedule. See [this directory](https://github.com/input-output-hk/ouroboros-network/tree/master/ouroboros-consensus-mock-test/test/Test/ThreadNet).
* Byron/PBFT. See
  __[Test.ThreadNet.Byron](https://github.com/input-output-hk/ouroboros-network/blob/master/ouroboros-consensus-byron-test/test/Test/ThreadNet/Byron.hs)__.
* DualByron. See
  __[Test.ThreadNet.DualByron](https://github.com/input-output-hk/ouroboros-network/blob/master/ouroboros-consensus-byron-test/test/Test/ThreadNet/DualByron.hs)__.
* Shelley/TPraos. See
  __[Test.ThreadNet.Shelley](https://github.com/input-output-hk/ouroboros-network/blob/master/ouroboros-consensus-shelley-test/test/Test/ThreadNet/Shelley.hs)__.
* The hard fork combinator transitioning from a mock ledger @A@ to a mock ledger @B@;
  these mock ledgers are absolutely minimal ledgers: the only transaction supported
  on the @A@ ledger is "initiate transition to @B@", and the @B@ ledger can only contain
  blocks with a header only, no body at all. TODO: where are these?
* @HardForkBlock '[Byron, Shelley]@: the hard fork combinator instantiated with
  the Byron and Shelley ledgers, running @PBFT@ before the transition and
  @TPraos@ after. TODO: where are these?
